{"version":3,"sources":["components/FilterForm.js","components/Header.js","components/Roles.js","components/Associated.js","components/App.js","serviceWorker.js","index.js"],"names":["FilterForm","searchInput","React","createRef","filterInput","searchHandler","_this","props","searchQuery","current","value","filterHandler","filterQuery","react_default","a","createElement","Form_default","Row_default","Col_default","xs","md","lg","Control","onChange","this","ref","className","placeholder","as","span","offset","Button_default","Component","Header","_ref","components_FilterForm","Roles","name","type","description","Associated","photo_url","first_name","alt","src","App","state","items","RoleData","filteredList","searchTerm","activeStatus","feedback","setState","updatedList","filter","item","toLowerCase","search","selection","sortedList","status","active","Container_default","components_Header","map","key","id","components_Roles","users","userData","i","components_Associated","Date","modified_on","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4678abe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass FilterForm extends Component  {\r\n\r\n    searchInput = React.createRef();\r\n    filterInput = React.createRef();\r\n\r\n    searchHandler = () => {\r\n        this.props.searchQuery(this.searchInput.current.value);\r\n    }\r\n\r\n    filterHandler = () => {\r\n        this.props.filterQuery(this.filterInput.current.value);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Form>\r\n                <Row>\r\n                    <Col xs={6} md={4} lg={4}>\r\n                      <Form.Control onChange={this.searchHandler} ref={this.searchInput} className=\"custom\" placeholder=\"Look up name...\" />\r\n                    </Col>\r\n                    <Col xs={6} md={4} lg={4}>\r\n                    <Form.Control onChange={this.filterHandler} ref={this.filterInput} as=\"select\" className=\"custom\">\r\n                        <option value=\"\">Active and Inactive</option>\r\n                        <option value=\"yes\">Active</option>\r\n                        <option value=\"no\">Inactive</option>\r\n                    </Form.Control>\r\n                    </Col>\r\n                    <Col xs={12} md={4} lg={{ span: 3, offset: 1 }}>\r\n                        <Button>CREATE NEW ROLE</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterForm;","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FilterForm from './FilterForm';\r\n\r\nconst Header = ({searchQuery, filterQuery}) => {\r\n    return (\r\n        <header>\r\n            <Col>\r\n                <h1>User Roles Management</h1>\r\n            </Col>\r\n            <FilterForm filterQuery={filterQuery} searchQuery={searchQuery} />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Roles = ({name, type, description}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2>{ name }</h2>\r\n            <h3>{ type }</h3>\r\n            <p>{ description }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Roles;","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Associated = ({photo_url, first_name}) => {\r\n\r\n    return (\r\n        <Col className=\"\">\r\n            <img alt={first_name} src={photo_url} />\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Associated;","// COMPONENTS\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Roles from './Roles';\nimport Associated from './Associated';\n// BOOTSTRAP\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// JSON\nimport RoleData from './user_roles.json'\n// STYLING\nimport './../App.scss';\n\nclass App extends Component {\n\n  state = {\n    items: RoleData,\n    filteredList: [],\n    searchTerm: '',\n    activeStatus: ''\n  } \n\n  componentDidMount() {\n      this.setState({\n        filteredList: this.state.items\n      }); \n  }\n\n  searchQuery = (feedback) => {\n    this.setState( () => ({\n      searchTerm: feedback\n    }));\n    let updatedList = this.state.items;\n    updatedList = updatedList.filter( item => {\n      return item.name.toLowerCase().search(feedback.toLowerCase()) !== -1;\n    });\n    this.setState({filteredList: updatedList});  \n  }\n\n  filterQuery = (selection) => {\n    this.setState( () => ({\n      activeStatus: selection\n    }));\n    let sortedList = this.state.items;\n    sortedList = sortedList.filter( status => {\n      return status.active.search(selection) !== -1;\n    });\n    this.setState({filteredList: sortedList});  \n  }\n\n\n  render() {\n     \n     return (\n        <Container>\n          <Header filterQuery={this.filterQuery} searchQuery={this.searchQuery} />\n          <Row>\n              {this.state.filteredList.map( (item) => {\n                  return (\n                    <Col xs={12} md={6} lg={4} key={item.id}>\n                      <div className=\"role_card\">\n                        <Roles \n                              name={item.name}\n                              type={item.type}\n                              description={item.description}\n                          />\n                            <Row>\n                              {item.users.map((userData, i) => (\n                                <div key={userData.id}>\n                                  <Associated \n                                    photo_url={userData.photo_url}\n                                    first_name={userData.first_name}\n                                  />\n                                </div>\n                              ))}\n                            </Row>\n                            <Row className=\"postdate\">\n                              <Col>\n                                <p>{new Date(item.modified_on).toLocaleString()}</p>\n                              </Col>\n                            </Row>\n                        </div>\n                    </Col>\n                  ) \n                })\n              }\n          </Row>\n        </Container>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}